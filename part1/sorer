#!/usr/bin/env python3

import argparse
import re
import enum
import os
from sorer_helper import *

def arg_parser():
    parser = argparse.ArgumentParser(description='Data adaptor for SoR files')
    parser.add_argument('-f',
                        help="path to SoR file to be read", dest='sor_file')
    parser.add_argument('-from', type=int, default=0, required=False,
                        help="starting position in the file (in bytes), default is 0", dest="from_index")
    parser.add_argument('-len', type=int, default=SAMPLE_SIZE,
                        help="number of bytes to read, default is 500", dest="len")
    parser.add_argument('-print_col_type', type=int,
                        help="print the type of a column: BOOL, INT, FLOAT, STRING", metavar=("col_idx"))
    parser.add_argument("-print_col_idx", type=int, nargs=2,
                        help="print the value at the column offset", metavar=("col_idx, col_offset"))
    parser.add_argument('-is_missing_idx', type=int, nargs=2,
                        help="is there a missing in the specific column offset", metavar=("col_idx, col_offset"))
    args = parser.parse_args()

    if not ((args.print_col_type != None) or args.print_col_idx or args.is_missing_idx):
        parser.error(
            'No action requested, please use -print_col_type, -print_col_idx or -is_missing_idx  appropriately')

    return args

def incorrect_index():
    print("Incorrect indices")
    exit(1)

def main():
    args = arg_parser()

    lines = open_file(args.sor_file, args.len, args.from_index)

    if (len(lines) < 1):
        print("Empty file")
        exit(0)

    if (args.from_index != 0 and len(lines) > 0):
        lines.pop(0)

    if (args.len < os.path.getsize(args.sor_file) and len(lines) > 0):
        lines.pop()
    
    if (len(lines) < 1):
        print("Invalid file or offset")
        exit(0)

    collection = parse_lines(lines)
    schema = find_schema(collection)

    matrix = []
    if (args.print_col_idx or args.is_missing_idx):
        matrix = construct_matrix(schema, collection)

    print_type = args.print_col_type != None
    print_idx = args.print_col_idx
    print_missing = args.is_missing_idx

    print_format = (print_type and print_idx) or (print_type and print_missing) or (print_idx and print_missing)

    if(print_type and (print_type >= len(schema) or print_type < 0)):
        incorrect_index()
    
    if (print_idx):
        column, offset = print_idx
        if (column > len(schema) or column < -1 or offset >= len(matrix[column]) or offset < 0):
            incorrect_index()

    if(print_missing):
        column, offset = print_missing
        if (column > len(schema) or column < -1 or offset >= len(matrix[column]) or offset < 0):
            incorrect_index()
    
    if print_type:
        if print_format:
            print("Column type:")
        print(print_col_type(schema, args.print_col_type))
    
    if print_idx:
        if print_format:
            print("Column value at offset:")
        column, offset = args.print_col_idx
        print(print_col_idx(matrix, column, offset))

    if print_missing:
        if print_format:
            print("Is value missing at offset?")
        column, offset = args.is_missing_idx
        print(is_missing_idx(matrix, column, offset))

main()
